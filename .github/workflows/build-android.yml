name: Build Android App

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        
    - name: Set Android SDK environment
      run: |
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
      
    - name: Install dependencies
      run: npm ci
      
    - name: Build web app
      run: npm run build
      
    - name: Clean and regenerate Android project
      run: |
        rm -rf android
        npx cap add android
        npx cap sync android
        
    - name: Set version code and name
      run: |
        cd android
        
        # Ensure variables.gradle has correct version configuration
        if ! grep -q "versionCode = 9" variables.gradle; then
          sed -i '/targetSdkVersion = 35/a\    versionCode = 9\n    versionName = "1.8"' variables.gradle
        fi
        echo "Updated variables.gradle:"
        cat variables.gradle
        
        # Update app/build.gradle to use the version variables
        cd app
        sed -i 's/versionCode.*$/versionCode 9/' build.gradle
        sed -i 's/versionName.*$/versionName "1.8"/' build.gradle
        
        echo "Final build.gradle version configuration:"
        grep -A2 -B2 "versionCode\|versionName" build.gradle
      
    - name: Patch all Java versions to 17
      run: |
        # Force all Android modules to use Java 17
        find android -name "build.gradle" -exec sed -i 's/JavaVersion.VERSION_21/JavaVersion.VERSION_17/g' {} +
        find node_modules/@capacitor -name "build.gradle" -exec sed -i 's/JavaVersion.VERSION_21/JavaVersion.VERSION_17/g' {} +
        find android -name "build.gradle" -exec sed -i 's/sourceCompatibility = 21/sourceCompatibility = 17/g' {} +
        find android -name "build.gradle" -exec sed -i 's/targetCompatibility = 21/targetCompatibility = 17/g' {} +
      
    - name: Make gradlew executable
      run: chmod +x android/gradlew
      
    - name: Setup signing keystore
      run: |
        cd android
        if [ ! -z "${{ secrets.UPLOAD_KEYSTORE_BASE64 }}" ]; then
          echo "Using existing keystore from secrets"
          echo "${{ secrets.UPLOAD_KEYSTORE_BASE64 }}" | base64 -d > upload-keystore.jks
        else
          echo "Generating new upload keystore (first-time setup)"
          keytool -genkey -v -keystore upload-keystore.jks -keyalg RSA -keysize 2048 -validity 10000 -alias upload \
          -dname "CN=The Mom App, OU=Development, O=TJ Walton Marketing LLC, L=Unknown, ST=Unknown, C=US" \
          -storepass android -keypass android
          echo "IMPORTANT: Save this keystore to GitHub Secrets as UPLOAD_KEYSTORE_BASE64"
          echo "Run: base64 -w 0 upload-keystore.jks"
        fi
        
    - name: Configure upload signing for Google Play
      run: |
        cd android/app
        cat >> build.gradle << 'EOF'
        
        android {
            signingConfigs {
                release {
                    storeFile file('../upload-keystore.jks')
                    storePassword 'android'
                    keyAlias 'upload'
                    keyPassword 'android'
                }
            }
            buildTypes {
                release {
                    signingConfig signingConfigs.release
                }
            }
        }
        EOF
        
    - name: Extract upload certificate fingerprint
      run: |
        cd android
        keytool -list -v -keystore upload-keystore.jks -alias upload -storepass android -keypass android | grep -E "(SHA1|SHA256)" > upload-cert-fingerprint.txt
        echo "Upload certificate fingerprint:"
        cat upload-cert-fingerprint.txt
        
    - name: Verify API Level Configuration
      run: |
        cd android
        echo "Checking API level configuration..."
        grep -r "targetSdkVersion\|compileSdkVersion" . --include="*.gradle"
        echo "Variables.gradle contents:"
        cat variables.gradle
        
    - name: Clean and Build Android App Bundle (signed for Google Play App Signing)
      run: |
        cd android
        export JAVA_HOME=$JAVA_HOME_17_X64
        export ANDROID_COMPILE_SDK=35
        export ANDROID_BUILD_TOOLS=35.0.0
        export ANDROID_TARGET_SDK=35
        rm -rf .gradle build app/build
        ./gradlew clean bundleRelease -Dorg.gradle.java.home=$JAVA_HOME_17_X64 --no-daemon --no-build-cache
        
    - name: Build Android APK (unsigned)
      run: |
        cd android
        export JAVA_HOME=$JAVA_HOME_17_X64
        export ANDROID_COMPILE_SDK=35
        export ANDROID_BUILD_TOOLS=35.0.0
        export ANDROID_TARGET_SDK=35
        ./gradlew assembleRelease -Dorg.gradle.java.home=$JAVA_HOME_17_X64
        
    - name: Upload App Bundle
      uses: actions/upload-artifact@v4
      with:
        name: app-bundle
        path: android/app/build/outputs/bundle/release/app-release.aab
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-apk
        path: android/app/build/outputs/apk/release/app-release.apk
        
    - name: Upload certificate fingerprint
      uses: actions/upload-artifact@v4
      with:
        name: upload-certificate-info
        path: android/upload-cert-fingerprint.txt
        
    - name: Upload keystore for backup (first-time only)
      uses: actions/upload-artifact@v4
      with:
        name: upload-keystore-backup
        path: android/upload-keystore.jks
      if: env.UPLOAD_KEYSTORE_BASE64 == ''
        
    - name: Check for ProGuard mapping file
      id: check-mapping
      run: |
        if [ -f "android/app/build/outputs/mapping/release/mapping.txt" ]; then
          echo "mapping_exists=true" >> $GITHUB_OUTPUT
        else
          echo "mapping_exists=false" >> $GITHUB_OUTPUT
          echo "No mapping file generated - this is normal for Capacitor apps with minimal obfuscation"
        fi
        
    - name: Upload ProGuard mapping file (if exists)
      uses: actions/upload-artifact@v4
      with:
        name: proguard-mapping
        path: android/app/build/outputs/mapping/release/mapping.txt
      if: steps.check-mapping.outputs.mapping_exists == 'true'